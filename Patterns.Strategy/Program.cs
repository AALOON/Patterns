using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Patterns.Strategy
{
    /// <summary>
    /// Стратегия (англ. Strategy) — поведенческий шаблон проектирования, предназначенный 
    /// для определения семейства алгоритмов, инкапсуляции каждого из них и обеспечения их 
    /// взаимозаменяемости. Это позволяет выбирать алгоритм путём определения соответствующего 
    /// класса. Шаблон Strategy позволяет менять выбранный алгоритм независимо от 
    /// объектов-клиентов, которые его используют.
    /// https://ru.wikipedia.org/wiki/%D0%A1%D1%82%D1%80%D0%B0%D1%82%D0%B5%D0%B3%D0%B8%D1%8F_(%D1%88%D0%B0%D0%B1%D0%BB%D0%BE%D0%BD_%D0%BF%D1%80%D0%BE%D0%B5%D0%BA%D1%82%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D1%8F)
    /// 
    /// Архитектура Microsoft WDF основана на этом паттерне. У каждого объекта «драйвер» и
    /// «устройство» есть неизменяемая часть, вшитая в систему, в которой регистрируется 
    /// изменяемая часть (стратегия), написанная в конкретной реализации. Изменяемая часть 
    /// может быть и вовсе пустой, что даст ничего не делающий драйвер, но при этом способный
    /// участвовать в PnP и управлении питанием.
    /// 
    /// Библиотека ATL содержит в себе набор классов threading model, которые являются 
    /// стратегиями (различными реализациями Lock/Unlock, которые потом используются основными 
    /// классами системы). При этом в этих стратегиях используется статический полиморфизм через 
    /// параметр шаблона, а не динамический полиморфизм через виртуальные методы.
    /// </summary>

    // Класс реализующий конкретную стратегию, должен наследовать этот интерфейс
    // Класс контекста использует этот интерфейс для вызова конкретной стратегии
    public static class Program
    {
        // <summary>
        // Точка входа в программу.
        // </summary>
        public static void Main()
        {
            // Создаём контекст и инициализируем его первой стратегией.
            Context context = new Context(new ConcreteStrategy1());
            // Выполняем операцию контекста, которая использует первую стратегию.
            context.ExecuteOperation();
            // Заменяем в контексте первую стратегию второй.
            context.SetStrategy(new ConcreteStrategy2());
            // Выполняем операцию контекста, которая теперь использует вторую стратегию.
            context.ExecuteOperation();
            Console.Read();
        }
    }

    public interface IStrategy
    {
        void Algorithm();
    }

    // Первая конкретная реализация-стратегия.
    public class ConcreteStrategy1 : IStrategy
    {
        public void Algorithm()
        {
            Console.WriteLine("Выполняется алгоритм стратегии 1.");
        }
    }

    // Вторая конкретная реализация-стратегия.
    // Реализаций может быть сколько угодно много.
    public class ConcreteStrategy2 : IStrategy
    {
        public void Algorithm()
        {
            Console.WriteLine("Выполняется алгоритм стратегии 2.");
        }
    }

    // Контекст, использующий стратегию для решения своей задачи.
    public class Context
    {
        // Ссылка на интерфейс IStrategy
        // позволяет автоматически переключаться между конкретными реализациями
        // (другими словами, это выбор конкретной стратегии).
        private IStrategy _strategy;

        // Конструктор контекста.
        // Инициализирует объект стратегией.
        public Context(IStrategy strategy)
        {
            _strategy = strategy;
        }

        // Метод для установки стратегии.
        // Служит для смены стратегии во время выполнения.
        // В C# может быть реализован также как свойство записи.
        public void SetStrategy(IStrategy strategy)
        {
            _strategy = strategy;
        }

        // Некоторая функциональность контекста, которая выбирает
        //стратегию и использует её для решения своей задачи.
        public void ExecuteOperation()
        {
            _strategy.Algorithm();
        }
    }
    
}
